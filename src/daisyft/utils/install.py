from pathlib import Path
from typing import Type
import inspect
from ..registry.base import RegistryBase
from ..utils.config import ProjectConfig

def install_component(component_class: Type[RegistryBase], config: ProjectConfig) -> None:
    """Install a component into the user's project"""
    meta = component_class._registry_meta
    target_dir = config.paths["ui"]
    target_dir.mkdir(parents=True, exist_ok=True)

    # Get the source code
    source = inspect.getsource(component_class)
    
    # Clean up the source code (remove registry stuff)
    lines = []
    skip = False
    for line in source.split('\n'):
        if any(x in line for x in ['@Registry', 'RegistryBase']):
            skip = True
            continue
        if not skip and not line.startswith('class'):
            lines.append(line)
        if line.strip() == '':
            skip = False
    
    # Add imports from registry metadata
    imports = '\n'.join(meta.imports)
    
    # Generate clean source with component's metadata
    clean_source = f'''"""{meta.name.title()} Component
{meta.description}
Generated by DaisyFT
"""

{imports}

{chr(10).join(lines)}
'''
    
    # Write the file
    target_path = target_dir / f"{meta.name}.py"
    target_path.write_text(clean_source)

def add_component_css(css_file: Path, tailwind_config: dict) -> None:
    """Add component CSS to input.css"""
    existing_css = css_file.read_text() if css_file.exists() else ""
    
    new_css = []
    if "components" in tailwind_config:
        new_css.append("\n@layer components {")
        for class_name, styles in tailwind_config["components"].items():
            new_css.append(f"  .{class_name} {{\n    {styles}\n  }}")
        new_css.append("}")
    
    # Append new CSS if it doesn't already exist
    new_css_text = "\n".join(new_css)
    if new_css_text not in existing_css:
        with css_file.open("a") as f:
            f.write(f"\n{new_css_text}\n") 