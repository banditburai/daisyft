from pathlib import Path
from typing import Type
import inspect
from ..registry.base import RegistryBase
from ..utils.config import ProjectConfig
from dataclasses import dataclass

def install_component(component_class: Type[RegistryBase], config: ProjectConfig) -> None:
    """Install a component into the user's project"""
    meta = component_class._registry_meta
    target_dir = component_class.get_install_path(config)  # Use the class method to get path
    target_dir.mkdir(parents=True, exist_ok=True)

    # Get the source code
    source = inspect.getsource(component_class)
    
    # Clean up the source code
    lines = []
    in_class = False
    docstring = None
    
    # Extract docstring separately
    if component_class.__doc__:
        docstring = inspect.cleandoc(component_class.__doc__)
    
    # Process source lines
    for line in source.split('\n'):
        # Skip registry decorator and base class
        if any(x in line for x in ['@Registry', '(RegistryBase)']):
            continue
            
        # Start collecting when we hit the class definition
        if line.startswith('class '):
            in_class = True
            # Remove RegistryBase from class definition
            line = line.replace('(RegistryBase)', '')
            lines.append(line)
            continue
            
        if in_class:
            lines.append(line)
    
    # Generate clean source with imports and docstring
    clean_source = f'''"""Button Component
{meta.description}
Generated by DaisyFT
"""

{chr(10).join(meta.imports)}

@dataclass
class {meta.name.capitalize()}:
    """{docstring}"""
{chr(10).join(lines[1:])}
'''
    
    # Write the file
    target_path = target_dir / f"{meta.name}.py"
    target_path.write_text(clean_source)

def add_component_css(css_file: Path, tailwind_config: dict) -> None:
    """Add component CSS to input.css"""
    # Ensure the CSS file exists
    css_file.parent.mkdir(parents=True, exist_ok=True)
    existing_css = css_file.read_text() if css_file.exists() else ""
    
    new_css = []
    if "components" in tailwind_config:
        new_css.append("\n@layer components {")
        for class_name, styles in tailwind_config["components"].items():
            # Clean up the CSS formatting
            clean_styles = inspect.cleandoc(styles)
            new_css.append(f"  .{class_name} {{\n    {clean_styles}\n  }}")
        new_css.append("}")
    
    # Append new CSS if it doesn't already exist
    new_css_text = "\n".join(new_css)
    if new_css_text not in existing_css:
        with css_file.open("a") as f:
            f.write(f"\n{new_css_text}\n") 