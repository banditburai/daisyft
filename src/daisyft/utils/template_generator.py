from pathlib import Path
from typing import Type
import inspect
from daisyft.registry.decorators import Registry, RegistryBase

def generate_component_templates(component_class: Type[RegistryBase]) -> None:
    """Generate Jinja templates from any component class"""
    meta = component_class._registry_meta
    name = meta.name
    
    # For each file in the component's files list
    for file in meta.files:
        if file.endswith('.py'):
            template = generate_py_template(component_class)
            write_template(f"components/{name}.py.jinja2", template)
        elif file.endswith('.css'):
            template = generate_css_template(meta.tailwind)
            write_template(f"components/{name}.css.jinja2", template)

def generate_py_template(component_class: Type[RegistryBase]) -> str:
    """Generate Python component template from any component class"""
    source = inspect.getsource(component_class)
    
    # Strip registry-specific code
    source = strip_registry_code(source)
    
    # Add imports
    imports = """from dataclasses import dataclass
from typing import Optional, Union, List
from fasthtml.common import *"""
    
    # Add template variables and Jinja logic
    template = f'''"""{{{{ component|title }}}} Component

{component_class.__doc__}
Generated by DaisyFT.
"""

{imports}

{source}'''
    
    return template

def generate_css_template(tailwind_config: dict) -> str:
    """Generate CSS template from any component's Tailwind config"""
    template = '''/* {{ component|title }} Component Styles */
{% if config.components.{{ component }} %}
  {% with variants = config.components.{{ component }} %}
    {# Base styles #}
    {% if variants.base %}
.{{ variants.base }} {
  @apply inline-flex items-center justify-center gap-2 transition-colors;
}
    {% endif %}

    {# Variant styles #}
    {% if variants.variants %}
      {% for variant, styles in variants.variants.items() %}
.btn-{{ variant }} {
  @apply {{ styles }};
}
      {% endfor %}
    {% endif %}

    {# Size variants #}
    {% if variants.sizes %}
      {% for size, styles in variants.sizes.items() %}
.btn-{{ size }} {
  @apply {{ styles }};
}
      {% endfor %}
    {% endif %}

    {# Style modifiers #}
    {% if variants.styles %}
      {% for style, styles in variants.styles.items() %}
.btn-{{ style }} {
  @apply {{ styles }};
}
      {% endfor %}
    {% endif %}

    {# Layout modifiers #}
    {% if variants.modifiers %}
      {% for modifier, styles in variants.modifiers.items() %}
.btn-{{ modifier }} {
  @apply {{ styles }};
}
      {% endfor %}
    {% endif %}

    {# State styles #}
    {% if variants.states %}
      {% for state, styles in variants.states.items() %}
.btn-{{ state }} {
  @apply {{ styles }};
}
      {% endfor %}
    {% endif %}
  {% endwith %}
{% endif %}'''
    
    return template

def strip_registry_code(source: str) -> str:
    """Remove registry-specific code from component source"""
    # Remove Registry decorator line
    lines = source.split('\n')
    cleaned_lines = []
    skip_next = False
    
    for line in lines:
        if '@Registry' in line or '_registry_meta' in line:
            continue
        if 'class Button(' in line:
            # Remove RegistryBase inheritance
            line = 'class Button:'
        if 'def install(' in line:
            skip_next = True
            continue
        if skip_next:
            if line.strip().startswith('"""'):
                skip_next = False
            continue
            
        cleaned_lines.append(line)
    
    return '\n'.join(cleaned_lines)

def write_template(path: str, content: str) -> None:
    """Write template to the templates directory"""
    template_dir = Path(__file__).parent.parent / 'templates'
    (template_dir / path).write_text(content)

def generate_base_styles() -> str:
    """Generate base styles section of CSS template"""
    return '''
    {% if variants.base_styles %}
.{{ variants.base }} {
  @apply {{ variants.base_styles }};
}
    {% endif %}'''

def generate_color_styles() -> str:
    """Generate color variants section of CSS template"""
    return '''
    {% if variants.colors %}
      {% for color, class in variants.colors.items() %}
        {% if variants.color_styles and color in variants.color_styles %}
.{{ class }} {
  @apply {{ variants.color_styles[color] }};
}
        {% endif %}
      {% endfor %}
    {% endif %}'''

def generate_style_modifiers() -> str:
    """Generate style modifiers section of CSS template"""
    return '''
    {% if variants.styles %}
      {% for style_name, class in variants.styles.items() %}
.{{ class }} {
  @apply {{ variants.style_styles[style_name] }};
}
      {% endfor %}
    {% endif %}'''

def generate_size_styles() -> str:
    """Generate size variants section of CSS template"""
    return '''
    {% if variants.sizes %}
      {% for size_name, class in variants.sizes.items() %}
.{{ class }} {
  @apply {{ variants.size_styles[size_name] }};
}
      {% endfor %}
    {% endif %}'''

def generate_modifier_styles() -> str:
    """Generate layout modifier section of CSS template"""
    return '''
    {% if variants.modifiers %}
      {% for modifier_name, class in variants.modifiers.items() %}
.{{ class }} {
  @apply {{ variants.modifier_styles[modifier_name] }};
}
      {% endfor %}
    {% endif %}'''

def generate_all_templates():
    """CLI entry point to generate all component templates"""
    from daisyft.registry.decorators import Registry
    
    # Get all registered components
    components = list(Registry._components.values())
    
    for component in components:
        try:
            generate_component_templates(component)
            print(f"Generated templates for {component._registry_meta.name}")
        except Exception as e:
            print(f"Error generating templates for {component._registry_meta.name}: {e}")

if __name__ == "__main__":
    generate_all_templates() 